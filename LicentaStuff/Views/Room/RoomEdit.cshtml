@model LicentaStuff.Models.NewRoomViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Build your room!</title>
    <meta name="Build your room!">
    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-event-set-component@5.0.0/dist/aframe-event-set-component.min.js"></script>
    <link rel="stylesheet" type="text/css" href="~/camera.css">
    <script src="~/ResourcesP/AddGltfObj.js"></script>
    <script src="~/ResourcesP/SaveScene.js"></script>
    <style type="text/css">
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }

        #content {
            position: flex;
            left: 0;
            right: 0;
            bottom: 0;
            top: 0px;
            display: block;
        }
    </style>
    <script>
        function Functie() {
            var frame = document.getElementById('myFrame');
            var doc = frame.contentDocument || frame.contentWindow.document;
            var sceneEl = doc.querySelector('a-scene');
            var pl = doc.querySelectorAll("a-plane");
            var box = doc.querySelectorAll("a-box");
            alert(1);
            var str = "@Model.Room.Camera";
            var res = str.substring(str.length - 29, str.length - 5);
            var x = str.substring(str.length - 5);
            str = str.substring(0, str.length - 29);
  
            var string = res.substring(0, 6);
            if (string != "") {
                
                box[0].setAttribute('material', 'repeat', "1 2");
                box[0].setAttribute('material', 'color',"#" + string);

                string = res.substring(6, 12);
                box[1].setAttribute('material', 'repeat', "1 2");
                box[1].setAttribute('material', 'color', "#" + string);

                string = res.substring(12, 18);
                box[2].setAttribute('material', 'repeat', "1 2");
                box[2].setAttribute('material', 'color', "#" + string);

                string = res.substring(18, 24);
                box[3].setAttribute('material', 'repeat', "1 2");
                box[3].setAttribute('material', 'color', "#" + string);

            }
           
            
            if (x != "undef") {
                pl[0].setAttribute('material', 'repeat', "1 2");
                pl[0].setAttribute('material', 'src', x);
            }
            else {
                pl[0].setAttribute('material', 'repeat', "1 2");
                pl[0].setAttribute('material', 'color', "#ffffff");
            }
            var count = 0;
            var index = 1;
            while (index != -2) {
                var ind = str.indexOf("(");
                var urlGlph = str[ind + 1];
                index = str.indexOf("a");
                str = str.substring(index + 1);
                var rotationY = parseFloat(str);
                index = str.indexOf("b");
                str = str.substring(index + 2);
                var pozitionX = parseFloat(str);
                index = str.indexOf(" ");
                str = str.substring(index + 1);
                var pozitionY = parseFloat(str);
                index = str.indexOf(" ");
                str = str.substring(index + 1);
                var pozitionZ = parseFloat(str);
                index = str.indexOf("c");
                str = str.substring(index + 2);
                var scaleX = parseFloat(str);
                index = str.indexOf(" ");
                str = str.substring(index + 1);
                var scaleY = parseFloat(str);
                index = str.indexOf(" ");
                str = str.substring(index + 1);
                var scaleZ = parseFloat(str);
                index = str.indexOf("u");
                index--;
                str = str.substring(index);
                count++;
                if (urlGlph == undefined) {
                    var entity = doc.createElement('a-entity');
                    var entity1 = doc.createElement('a-entity');
                    entity.setAttribute('gltf-model', 'url(l.gltf)');
                    entity.setAttribute('scale', '0.005 0.005 0.005');
                    entity.setAttribute('position', '-0.810 1.605 -0.083');
                    entity.setAttribute('rotation', '0 0 0');
                    entity1.setAttribute('gltf-model', 'url(6.gltf)');
                    entity1.setAttribute('scale', '0.008 0.008 0.008');
                    entity1.setAttribute('position', '0 0.07 -1.949');
                    entity1.setAttribute('rotation', '0 0 0');
                    sceneEl.appendChild(entity);
                    sceneEl.appendChild(entity1);
                    
                }
                if (urlGlph == undefined)
                    break;
                if (urlGlph == "6" || urlGlph == "l") {
                    var entity = doc.createElement('a-entity');
                    entity.setAttribute('gltf-model', 'url(' + String(urlGlph) + '.gltf)');
                    entity.setAttribute('scale', String(scaleX) + ' ' + String(scaleY) + ' ' + String(scaleZ));
                    entity.setAttribute('position', String(pozitionX) + ' ' + String(pozitionY) + ' ' + String(pozitionZ));
                    entity.setAttribute('rotation', '0 ' + String(rotationY) + ' 0');
                   
                    debugger;
                    sceneEl.appendChild(entity);
                }
                else {
                    var entity = doc.createElement('a-entity');
                    entity.setAttribute('gltf-model', 'url(' + String(urlGlph) + '.gltf)');
                    entity.setAttribute('scale', String(scaleX) + ' ' + String(scaleY) + ' ' + String(scaleZ));
                    entity.setAttribute('position', String(pozitionX) + ' ' + String(pozitionY) + ' ' + String(pozitionZ));
                    entity.object3D.rotation.x = 0;
                    entity.object3D.rotation.y = rotationY;
                    entity.object3D.rotation.z = 0;
                    entity.setAttribute('dragndrop', '');
                    debugger;
                    sceneEl.appendChild(entity);
                }
               
            }

        }
    </script>
</head>
<body onload="Functie()">
    @if (Model.Obiecte == null)
    {
        Model.Obiecte = "dsadas";
    }
    <div class="navbarr">
        @Html.ActionLink("Home", "Index", "Home", new { area = "" }, null)
        @Html.ActionLink("Back to the project", "Show", "Project", new { id = Model.Room.ProjectId }, null)
        <div class="dropdownn">
            <button class="dropbtnn">
                Objects
                <i class="fa fa-caret-down"></i>
            </button>
            <div class="dropdownn-content">
                <a href="#" id="1" onclick="AddGltfObj(id)">Desk</a>
                <a href="#" id="2" onclick="AddGltfObj(id)">Chair</a>
                <a href="#" id="4" onclick="AddGltfObj(id)">Round Table</a>
                <a href="#" id="5" onclick="AddGltfObj(id)">Sofa</a>
                <a href="#" id="7" onclick="AddGltfObj(id)">Laptop</a>
            </div>
        </div>
        <a href="#home" onclick="SaveScene(@Model.Room.Id)">Save changes</a>
    </div>
    <div id="content">
        <iframe src="~/ResourcesP/camera2.html" id="myFrame" style="border: none;" width="100%" height="600px" allowfullscreen="yes" allowvr="yes" scrolling="no"></iframe>

    </div>
</body>
</html>


    <script>
        function SaveScene(Id) {
            var frame = document.getElementById('myFrame');
            var doc = frame.contentDocument || frame.contentWindow.document;
            var el = doc.querySelectorAll("a-entity");
            var col = doc.querySelectorAll("a-box");
            var pl = doc.querySelectorAll("a-plane");
            var str = "";
            if (Id < 10) {
                str = str + 0 + String(Id*10) ;
            }
            else {
                str = String(Id);
            }
            str = str + "|";
            for (let i = 0; i < el.length; i++) {

                if (el[i].components["gltf-model"] == undefined)
                    continue;
                str += el[i].components["gltf-model"].attrValue;
                str += "a";
                str += String(el[i].object3D.rotation.y);
                str += "b";
                str = str + " " + String(el[i].object3D.position.x) + " " + String(el[i].object3D.position.y) + " " + String(el[i].object3D.position.z);
                str += "c";
                str = str + " " + String(el[i].object3D.scale.x) + " " + String(el[i].object3D.scale.y) + " " + String(el[i].object3D.scale.z);
                str += " ";
            }
            console.log(col);
            debugger;
            for (let i = 0; i < col.length; i++) {
                if (col[i].components.material.attrValue.color == undefined)
                    str += "#ffffff";
                else
                    str += col[i].components.material.attrValue.color;
            }
            if (pl[0].components.material.attrValue.src == "") 
                str += "undef";
            
            else
                str = str + pl[0].components.material.attrValue.src;
            console.log(str);

            debugger;
            str = str.replace(/#/g, "");
            alert("https://localhost:44334/Room/SavedR?str=" + str);
            window.location.replace("https://localhost:44334/Room/SavedR?str=" + str);
        }
    </script>